// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-sche

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Department {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String     @unique
  description       String?
  commissionPercent Float?     @default(0)
  commissionType    String
  active            Boolean    @default(true)
  employees         Employee[]
  updatedAt         DateTime   @updatedAt
  createdAt         DateTime   @default(now())

  @@map("departments")
}

model ExpertArea {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique //Corte,Montagem, Instalação
  description  String?
  updatedAt    DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  Commissioned Commissioned[]

  @@map("expert_areas")
}

model Commissioned {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  expertAreaId      String     @db.ObjectId
  expertArea        ExpertArea @relation(fields: [expertAreaId], references: [id])
  commissionPercent Float?
  active            Boolean    @default(true)
  Employee          Employee?  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employeeId        String?    @db.ObjectId
  updatedAt         DateTime   @updatedAt
  createdAt         DateTime   @default(now())

  @@map("commissioned")
}

model Employee {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String         @unique
  salary         Float?
  commissionedBy Commissioned[]
  active         Boolean        @default(true)
  // Production     Production?    @relation(fields: [productionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Department     Department?    @relation(fields: [departmentId], references: [id])
  departmentId   String?        @db.ObjectId

  people   People? @relation(fields: [peopleId], references: [id])
  peopleId String? @unique @db.ObjectId

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("employees")
}

// model Production {
//   id                String      @id @default(auto()) @map("_id") @db.ObjectId
//   BudgetItem        BudgetItem? @relation(fields: [budgetItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   budgetItemId      String?     @db.ObjectId
//   expertArea        ExpertArea  @relation(fields: [expertAreaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   expertAreaId      String      @db.ObjectId
//   employees         Employee[]
//   divisionBy        Float
//   amountByEmployees Float
//   productionAt      DateTime
//   updatedAt         DateTime    @updatedAt
//   createdAt         DateTime    @default(now())
// }

// model StageProduction {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   description String
//   Budget      Budget?  @relation(fields: [budgetId], references: [id])
//   budgetId    String?  @db.ObjectId
//   updatedAt   DateTime @updatedAt
//   createdAt   DateTime @default(now())
// }

model BudgetItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemOrd     Int
  description String
  measure     String
  width       Int
  height      Int
  quantity    Float
  amount_unit Float
  discont     Float
  subTotal    Float
  total       Float
  Budget      Budget?  @relation(fields: [budgetId], references: [id])
  budgetId    String?  @db.ObjectId
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("budget_items")
}

enum CommissionStatus {
  OPEN
  CLOSED
}

model Budget {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  shortId             Int
  customer            String
  saller              String?
  discont             Float
  discontPercent      Float
  subTotal            Float
  total               Float
  itemsCount          Int
  budgetItems         BudgetItem[]
  commissionStatus    CommissionStatus @default(CLOSED)
  statusConstructions String?
  updatedAt           DateTime         @updatedAt
  createdAt           DateTime         @default(now())
  Company             Company?         @relation(fields: [companyId], references: [id])
  companyId           String?          @db.ObjectId

  @@map("budgets")
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  People    People?  @relation(fields: [peopleId], references: [id])
  peopleId  String?  @db.ObjectId

  @@map("addresses")
}

model Company {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  tradingName                  String //Nome Fantasia
  comapanyName                 String //Razão Social
  stateRegistration            String //Inscrição Estadual
  employerIdentificationNumber String //CNPJ (EIN)
  budget                       Budget[]
  peoples                      People[]
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("companies")
}

model People {
  id                           String    @id @default(auto()) @map("_id") @db.ObjectId
  typePerson                   String //Pessoa Fisica ou Juridica
  fistName                     String
  lastName                     String
  fullName                     String
  individualTaxIdentification  String //CPF(ITIN)
  tradingName                  String //Nome Fantasia
  comapanyName                 String //Razão Social
  stateRegistration            String //Inscrição Estadual
  employerIdentificationNumber String //CNPJ (EIN)
  email                        String
  phone                        String[]
  note                         String
  address                      Address[]
  isCustomer                   Boolean   @default(false)
  isSupplier                   Boolean   @default(false)
  isEmployee                   Boolean   @default(false)

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?  @db.ObjectId

  employee Employee?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique @db.ObjectId

  @@map("peoples")
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("permissions")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String       @unique
  password       String
  avatar         String
  confirmedEmail Boolean
  // company  CompanyEntity[]
  permissions    Permission[]
  userData       People?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  peopleId  String?  @db.ObjectId

  @@map("users")
}
